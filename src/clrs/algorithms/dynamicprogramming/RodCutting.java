package clrs.algorithms.dynamicprogramming;

public class RodCutting {

	/**
	 * Operation for finding the optimal revenue of cutting a rod of length n
	 * into smaller rods
	 * 
	 * @param prices
	 *            Array of rod prices per length. prices[0] should be 0, or the
	 *            cost of a rod of length 0.
	 * @param n
	 *            length of rod to optimize cuts for revenue
	 * @return the maximum revenue generated by splicing a rod of length n
	 */
	public static int cutRodMemoized(int[] prices, int n) {
		int[] memo = new int[n + 1];
		for (int i = 0; i <= n; i++) {
			memo[i] = Integer.MIN_VALUE;
		}
		memo[0] = 0; // rod length of zero

		return cutRodMemoizedAux(prices, n, memo);
	}

	/**
	 * Recursive method for finding the optimal revenue of a rod of length n.
	 * 
	 * @param prices
	 *            Array of rod prices per length. prices[0] should be 0, or the
	 *            cost of a rod of length 0.
	 * @param n
	 *            length of rod to optimize cuts for revenue
	 * @param memo
	 *            an array with which to store the solutions of subproblems to
	 *            avoid redundant work
	 * @return the maximum revenue generated by splicing a rod of length n
	 */
	private static int cutRodMemoizedAux(int[] prices, int n, int[] memo) {
		// validate input
		if (n > prices.length) {
			throw new IllegalArgumentException();
		}

		// check if result has been computed
		if (memo[n] >= 0) {
			return memo[n];
		}

		// Recursive base case
		if (n == 0) {
			return 0;
		}

		int q = Integer.MIN_VALUE;
		for (int i = 1; i <= n; i++) {
			//The recursive call finds the optimal revenue of the rest of the rod
			q = Math.max(q, prices[i] + cutRodMemoizedAux(prices, n - i, memo));
		}

		memo[n] = q;

		return q;
	}

	/**
	 * Method for finding the maximum revenue generated by splicing a rod of
	 * length n. The result is calculated by iteratively solving subproblems
	 * from smallest to largest.
	 * 
	 * @param prices
	 *            Array of rod prices per length. prices[0] should be 0, or the
	 *            cost of a rod of length 0.
	 * @param n
	 *            length of rod to optimize cuts for revenue.
	 * @return the maximum revenue generated by splicing a rod of length n
	 */
	private static int cutRodBottomUp(int[] prices, int n) {
		int[] memo = new int[n + 1];
		for (int i = 0; i <= n; i++) {
			memo[i] = Integer.MIN_VALUE;
		}
		memo[0] = 0;

		int[] soln = new int[n + 1];

		//Build memo from the bottom up
		for (int i = 1; i <= n; i++) {
			int q = Integer.MIN_VALUE;
			for (int j = 1; j <= i; j++) {
				//The memo is the solved subproblem up to i
				q = Math.max(q, prices[j] + memo[i - j]);
			}
			memo[i] = q;
		}

		return memo[n];
	}

	public static void main(String[] args) {
		int[] prices = { 0, 1, 5, 8, 9, 10, 17, 17, 20, 24, 30 };

		int n = 7;

		System.out.println("Top down: " + cutRodMemoized(prices, n));// 18
		System.out.println("Bottom up: " + cutRodBottomUp(prices, n));

	}

}
